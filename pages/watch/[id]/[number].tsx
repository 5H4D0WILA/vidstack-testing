import styles from "../../../styles/Watch.module.scss";
import {
    AspectRatio,
    FullscreenButton,
    Media,
    MediaProvider,
    MuteButton,
    SliderValueText,
    TimeSlider,
    useMediaElement,
    useMediaProviderElement,
    useMediaState,
    VolumeSlider,
} from "@vidstack/react";
import { HLSVideo } from "@vidstack/react";
import { PlayButton } from "@vidstack/react";
import { CaptionButton } from "../../../components/caption_button";
import { SettingsPanel } from "../../../components/setting_panel";
import { useRef, useState } from "react";
import { WebVTTParser } from "webvtt-parser";
import axios from "axios";
import { useEffect } from "react";
import Head from "next/head";
import "vidstack/styles/base.css";
// the following styles are optional - remove to go headless.
import "vidstack/styles/ui/buttons.css";
import "vidstack/styles/ui/sliders.css";

export default function Home(props) {
    return (
        <div>
            <Head>
                <title>Vidstack</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/favicon.ico" />
                <link
                    rel="stylesheet"
                    href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,1,0"
                />
            </Head>
            <div className={styles.container}>
                <MediaProvider>
                    <Media className={styles.videoWrapper} view="video">
                        <AspectRatio
                            ratio="16/9"
                            className={styles.videoAspect}
                        >
                            <HLSVideo className={styles.videoPlayer}>
                                <video
                                    src={
                                        props.epData != null
                                            ? "https://cors.proxy.consumet.org/" +
                                              props.epData.sources[
                                                  props.quality
                                              ].url
                                            : ""
                                    }
                                    preload="none"
                                    data-video="0"
                                    className={styles.video}
                                />
                            </HLSVideo>
                        </AspectRatio>
                        <MediaPlayerUI {...props} />
                    </Media>
                </MediaProvider>
            </div>
        </div>
    );
}

function MediaPlayerUI(props) {
    const [open, setOpen] = useState(false);
    const [showControls, setShowControls] = useState(false);
    const [cues, setCues] = useState([]);
    const media = useMediaElement();

    // - This is a live subscription to the paused store.
    // - All stores are lazily subscribed to on prop access.
    const { currentTime, duration } = useMediaState();

    useEffect(() => {
        if (!media) return;
        // ...
    }, [media]);

    useEffect(() => {
        setCues(props.tree.cues);
        console.log(props);
    }, []);

    const [time, setTime] = useState("00:00");
    const [remaining, setRemaining] = useState("00:00");
    const [videoDuration, setVideoDuration] = useState("00:00");

    useEffect(() => {
        if (!media) return;

        const minutes = Math.floor(currentTime / 60);
        const seconds = (currentTime % 60).toFixed(0).padStart(2, "0");
        setTime(`${minutes}:${seconds}`);

        const rem = duration - currentTime

        const dur_minutes = Math.floor(rem / 60);
        const dur_seconds = (rem % 60).toFixed(0).padStart(2, "0");
        setRemaining(`${dur_minutes}:${dur_seconds}`)

        console.log(currentTime);

        const subtitleHTML = document.getElementById("subtitles");

        const overlappingCues = cues.filter(
            (cue) => cue.startTime <= currentTime && cue.endTime >= currentTime
        );
        console.log(overlappingCues);
        if (overlappingCues.length > 0) {
            if (subtitleHTML != null) {
                let subText = "";
                overlappingCues.forEach((cue) => {
                    subText += cue.text + "\n";
                });
                subtitleHTML.innerHTML = subText.trimEnd();
                subtitleHTML.style.background = "rgba(0, 0, 0, 0.7)";
            }
        } else {
            if (subtitleHTML != null) {
                subtitleHTML.innerHTML = "";
                subtitleHTML.style.background = "transparent";
            }
        }
    }, [currentTime]);

    useEffect(() => {
        if (!media) return;

        const dur_minutes = Math.floor(duration / 60);
        const dur_seconds = (duration % 60).toFixed(0).padStart(2, "0");
        setVideoDuration(`${dur_minutes}:${dur_seconds}`);
    }, [duration]);

    return (
        <div>
            <div className="media-overlay">
                <div className="top-bar">
                    <a
                        target="_blank"
                        href="https://www.vidstack.io/"
                        rel="noopener noreferrer"
                    >
                        <div className="vidstackLogoWrapper">
                            <img
                                className="vidstackLogo"
                                src="https://media.discordapp.net/attachments/1018251990624641044/1067154803068764170/RLcAMyjL_400x400-removebg-preview.png"
                                alt=""
                            />
                            <h4 className="vidstackTitle">Vidstack Player</h4>
                            <span className="material-symbols-outlined">
                                chevron_right
                            </span>
                        </div>
                    </a>

                    <div
                        aria-label="Settings"
                        onClick={() => {
                            setOpen(!open);
                        }}
                        className={`media-settings-button ${open ? "active": ""}`}
                    >
                        <span
                            className="material-symbols-outlined media-settings-icon"
                            style={{
                                transform: open
                                    ? "rotate(35deg)"
                                    : "rotate(0deg)",
                                transition: "0.3s all ease",
                            }}
                        >
                            settings
                        </span>
                    </div>
                </div>
                <div className="media-controls" onClick={() => {
                  setShowControls(!showControls)
                }}>
                    <div className="mobileControlsAboveProgress">
                      <h4 className="videoTimeRemaining">{remaining}</h4>
                            <FullscreenButton className="fullscreenMobile">
                            <svg width="12" height="12" viewBox="0 0 18 18" fill="white" xmlns="http://www.w3.org/2000/svg"
                                    slot="enter">
                              <path d="M17.1637 1.35703C17.1338 1.06289 16.8854 0.833344 16.5834 0.833344H11.9167C11.5945 0.833344 11.3334 1.09451 11.3334 1.41668V3.16668C11.3334 3.48884 11.5945 3.75001 11.9167 3.75001L14.1334 3.75001C14.1978 3.75001 14.25 3.80224 14.25 3.86668V6.08334C14.25 6.40551 14.5112 6.66668 14.8334 6.66668H16.5834C16.9055 6.66668 17.1667 6.40551 17.1667 6.08334V1.41668C17.1667 1.39654 17.1657 1.37664 17.1637 1.35703Z" />
                              <path d="M14.25 14.1333C14.25 14.1978 14.1978 14.25 14.1334 14.25L11.9167 14.25C11.5945 14.25 11.3334 14.5112 11.3334 14.8333V16.5833C11.3334 16.9055 11.5945 17.1667 11.9167 17.1667H16.5834C16.9055 17.1667 17.1667 16.9055 17.1667 16.5833V11.9167C17.1667 11.5945 16.9055 11.3333 16.5834 11.3333H14.8334C14.5112 11.3333 14.25 11.5945 14.25 11.9167V14.1333Z" />
                              <path d="M6.08337 14.25H3.86671C3.80227 14.25 3.75004 14.1978 3.75004 14.1333V11.9167C3.75004 11.5945 3.48887 11.3333 3.16671 11.3333H1.41671C1.09454 11.3333 0.833374 11.5945 0.833374 11.9167V16.5833C0.833374 16.9055 1.09454 17.1667 1.41671 17.1667H6.08337C6.40554 17.1667 6.66671 16.9055 6.66671 16.5833V14.8333C6.66671 14.5112 6.40554 14.25 6.08337 14.25Z" />
                              <path d="M3.75004 6.08334V3.86668C3.75004 3.80224 3.80227 3.75001 3.86671 3.75001L6.08337 3.75001C6.40554 3.75001 6.66671 3.48884 6.66671 3.16668V1.41668C6.66671 1.09451 6.40554 0.833344 6.08337 0.833344H1.41671C1.09454 0.833344 0.833374 1.09451 0.833374 1.41668V6.08334C0.833374 6.40551 1.09454 6.66668 1.41671 6.66668H3.16671C3.48887 6.66668 3.75004 6.40551 3.75004 6.08334Z" />
                            </svg>
                                <svg
                                    className="media-exit-fs-icon"
                                    aria-hidden="true"
                                    viewBox="0 0 24 24"
                                    slot="exit"
                                >
                                    <path
                                        fill="currentColor"
                                        d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"
                                    />
                                </svg>
                            </FullscreenButton>
                    </div>
                    <div className="progressWrapper">
                        <h4 className="videoTime">{time}</h4>
                        <TimeSlider className={`videoTimeSlider ${showControls ? "opened" : ""}`}>
                            <SliderValueText
                                type="pointer"
                                format="time"
                                slot="preview"
                            />
                        </TimeSlider>
                        <h4 className="videoTime">{videoDuration}</h4>
                    </div>

                    <div className="time">
                        <div className="playPauseWrapper">
                            <div className="playWrapper">
                                <PlayButton></PlayButton>
                            </div>
                            <div className="volume-controls">
                                <MuteButton></MuteButton>
                                <VolumeSlider></VolumeSlider>
                            </div>
                        </div>
                        <div className="title-wrapper">
                            <h2 className="video-title">
                                {props.data.title.english ??
                                    props.data.title.romaji}{" "}
                                :{" "}
                                {props.data.episodes[props.epNumber - 1].title}
                            </h2>
                        </div>
                        <div className="media-controls-buttons">
                            <SettingsPanel
                                isOpen={open}
                                sources={props.epData.sources}
                                subtitles={[]}
                            />
                            <CaptionButton />
                            <FullscreenButton>
                                <svg
                                    className="media-enter-fs-icon"
                                    aria-hidden="true"
                                    viewBox="0 0 24 24"
                                    slot="enter"
                                >
                                    <path
                                        fill="currentColor"
                                        d="M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z"
                                    />
                                </svg>
                                <svg
                                    className="media-exit-fs-icon"
                                    aria-hidden="true"
                                    viewBox="0 0 24 24"
                                    slot="exit"
                                >
                                    <path
                                        fill="currentColor"
                                        d="M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z"
                                    />
                                </svg>
                            </FullscreenButton>
                        </div>
                    </div>
                </div>
                <div className={`mobilePlayControls ${showControls ? "opened" : ""}`}>
                    <div className="skipWrapper skipBackward">
                        <svg width="15" height="18" viewBox="0 0 20 23" fill="white" xmlns="http://www.w3.org/2000/svg">
                            <path d="M10.5834 7.05206C10.5834 7.53083 10.0385 7.80574 9.65341 7.52123L5.69205 4.59434C5.37648 4.36118 5.37647 3.88921 5.69203 3.65603L9.65339 0.728882C10.0385 0.44435 10.5834 0.719251 10.5834 1.19803V2.57346C10.5834 2.63527 10.632 2.6863 10.6937 2.69056C15.8469 3.04662 19.9167 7.3397 19.9167 12.5833C19.9167 18.0602 15.4769 22.5 10.0001 22.5C4.71927 22.5 0.402561 18.3723 0.100303 13.1673C0.0816248 12.8457 0.34458 12.5839 0.666759 12.5839H2.41677C2.73892 12.5839 2.99755 12.846 3.02405 13.167C3.32062 16.7599 6.33062 19.5833 10.0001 19.5833C13.8661 19.5833 17.0001 16.4493 17.0001 12.5833C17.0001 8.95717 14.2423 5.97498 10.7099 5.61895C10.642 5.61211 10.5834 5.66583 10.5834 5.73405V7.05206Z"/>
                            <path d="M8.21915 15.3409C8.28359 15.3409 8.33582 15.2887 8.33582 15.2243V10.3667C8.33582 10.3022 8.28359 10.25 8.21915 10.25H7.22815C7.20638 10.25 7.18504 10.2561 7.16655 10.2676L5.99458 10.9963C5.96033 11.0176 5.93951 11.0551 5.93951 11.0954V11.8864C5.93951 11.9775 6.03929 12.0335 6.11703 11.9859L7.07242 11.4019C7.07607 11.3996 7.08027 11.3985 7.08456 11.3985C7.09742 11.3985 7.10784 11.4089 7.10784 11.4217V15.2243C7.10784 15.2887 7.16007 15.3409 7.2245 15.3409H8.21915Z"/>
                            <path d="M11.1208 15.2092C11.4091 15.3434 11.7389 15.4105 12.1101 15.4105C12.5062 15.4105 12.8517 15.3343 13.1467 15.1818C13.4433 15.0277 13.6737 14.8156 13.8378 14.5455C14.0035 14.2753 14.0863 13.9655 14.0863 13.6158C14.0863 13.2926 14.0167 13.0059 13.8775 12.7557C13.74 12.5055 13.5511 12.3099 13.3108 12.169C13.0721 12.0265 12.8004 11.9553 12.4954 11.9553C12.2551 11.9553 12.0405 12.0017 11.8516 12.0945C11.6682 12.1838 11.5341 12.2969 11.4492 12.4338C11.4459 12.4392 11.4401 12.4425 11.4338 12.4425C11.4232 12.4425 11.415 12.4334 11.416 12.4229L11.5207 11.3472C11.5265 11.2874 11.5767 11.2418 11.6368 11.2418H13.6689C13.7333 11.2418 13.7856 11.1896 13.7856 11.1252V10.3667C13.7856 10.3022 13.7333 10.25 13.6689 10.25H10.6269C10.5661 10.25 10.5155 10.2967 10.5106 10.3573L10.3064 12.8897C10.3016 12.9492 10.3425 13.0027 10.4012 13.0137L11.3041 13.1831C11.3523 13.1922 11.4001 13.1695 11.4301 13.1308C11.4944 13.0477 11.5785 12.9799 11.6826 12.9272C11.8151 12.8609 11.9552 12.8286 12.1027 12.8303C12.2584 12.8303 12.396 12.8651 12.5153 12.9347C12.6363 13.0026 12.7307 13.0979 12.7987 13.2205C12.8683 13.3432 12.9023 13.4865 12.9006 13.6506C12.9023 13.8113 12.8691 13.9539 12.8012 14.0781C12.7332 14.2008 12.6396 14.2961 12.5203 14.364C12.401 14.432 12.2642 14.4659 12.1101 14.4659C11.9129 14.4659 11.7431 14.4096 11.6005 14.2969C11.487 14.2058 11.4155 14.0915 11.3861 13.9541C11.3731 13.8934 11.3232 13.8445 11.2612 13.8445H10.2979C10.2325 13.8445 10.1794 13.8984 10.1855 13.9635C10.2094 14.2202 10.2934 14.4506 10.4372 14.6548C10.6046 14.8902 10.8324 15.0749 11.1208 15.2092Z"/>
                        </svg>
                    </div>
                    <div className="playWrapper mobilePlayWrapper">
                        <PlayButton></PlayButton>
                    </div>
                    <div className="skipWrapper skipBackward">
                        <svg width="15" height="18" viewBox="0 0 20 23" fill="white" xmlns="http://www.w3.org/2000/svg">
                            <path d="M9.41671 7.05206C9.41671 7.53083 9.96162 7.80574 10.3467 7.52123L14.308 4.59434C14.6236 4.36118 14.6236 3.88921 14.3081 3.65603L10.3467 0.728882C9.96164 0.44435 9.41671 0.719251 9.41671 1.19803V2.57346C9.41671 2.63527 9.36808 2.6863 9.30641 2.69056C4.15321 3.04662 0.083374 7.3397 0.083374 12.5833C0.083374 18.0602 4.52322 22.5 10 22.5C15.2808 22.5 19.5975 18.3723 19.8998 13.1673C19.9185 12.8457 19.6555 12.5839 19.3333 12.5839H17.5833C17.2612 12.5839 17.0026 12.846 16.9761 13.167C16.6795 16.7599 13.6695 19.5833 10 19.5833C6.13405 19.5833 3.00004 16.4493 3.00004 12.5833C3.00004 8.95717 5.75779 5.97498 9.29018 5.61895C9.35805 5.61211 9.41671 5.66583 9.41671 5.73405V7.05206Z"/>
                            <path d="M8.21913 15.3409C8.28357 15.3409 8.3358 15.2887 8.3358 15.2243V10.3667C8.3358 10.3022 8.28357 10.25 8.21913 10.25H7.22813C7.20636 10.25 7.18502 10.2561 7.16653 10.2676L5.99456 10.9963C5.96031 11.0176 5.93949 11.0551 5.93949 11.0954V11.8864C5.93949 11.9775 6.03927 12.0335 6.11701 11.9859L7.0724 11.4019C7.07605 11.3996 7.08026 11.3985 7.08454 11.3985C7.0974 11.3985 7.10782 11.4089 7.10782 11.4217V15.2243C7.10782 15.2887 7.16005 15.3409 7.22448 15.3409H8.21913Z"/>
                            <path d="M11.1208 15.2092C11.4091 15.3434 11.7389 15.4105 12.1101 15.4105C12.5062 15.4105 12.8517 15.3343 13.1467 15.1818C13.4433 15.0277 13.6737 14.8156 13.8377 14.5455C14.0035 14.2753 14.0863 13.9655 14.0863 13.6158C14.0863 13.2926 14.0167 13.0059 13.8775 12.7557C13.74 12.5055 13.551 12.3099 13.3107 12.169C13.0721 12.0265 12.8003 11.9553 12.4954 11.9553C12.2551 11.9553 12.0405 12.0017 11.8516 12.0945C11.6682 12.1838 11.534 12.2969 11.4492 12.4338C11.4459 12.4392 11.4401 12.4425 11.4338 12.4425C11.4232 12.4425 11.415 12.4334 11.416 12.4229L11.5207 11.3472C11.5265 11.2874 11.5767 11.2418 11.6368 11.2418H13.6689C13.7333 11.2418 13.7855 11.1896 13.7855 11.1252V10.3667C13.7855 10.3022 13.7333 10.25 13.6689 10.25H10.6268C10.566 10.25 10.5154 10.2967 10.5105 10.3573L10.3064 12.8897C10.3016 12.9492 10.3425 13.0027 10.4012 13.0137L11.3041 13.1831C11.3522 13.1922 11.4001 13.1695 11.4301 13.1308C11.4944 13.0477 11.5785 12.9799 11.6826 12.9272C11.8151 12.8609 11.9552 12.8286 12.1026 12.8303C12.2584 12.8303 12.396 12.8651 12.5153 12.9347C12.6363 13.0026 12.7307 13.0979 12.7987 13.2205C12.8683 13.3432 12.9022 13.4865 12.9006 13.6506C12.9022 13.8113 12.8691 13.9539 12.8012 14.0781C12.7332 14.2008 12.6396 14.2961 12.5203 14.364C12.4009 14.432 12.2642 14.4659 12.1101 14.4659C11.9129 14.4659 11.743 14.4096 11.6005 14.2969C11.487 14.2058 11.4155 14.0915 11.3861 13.9541C11.3731 13.8934 11.3232 13.8445 11.2612 13.8445H10.2979C10.2324 13.8445 10.1793 13.8984 10.1854 13.9635C10.2094 14.2202 10.2933 14.4506 10.4372 14.6548C10.6045 14.8902 10.8324 15.0749 11.1208 15.2092Z"/>
                        </svg>
                    </div>
                </div>
            </div>
            <div className="subtitlesWrapper">
                <p className="subtitle" id="subtitles" style={{opacity: cues.length != 0 ? "1.0" : "0.0", transition: "0.3s all ease"}}></p>
            </div>
        </div>
    );
}

export async function getServerSideProps(context) {
    const id = context.params.id;
    const epNumber = context.params.number.split("-ep-")[1];

    console.log(id);

    const url = `https://api.consumet.org/meta/anilist/info/${id}?provider=zoro`;

    console.log(url);

    const res = await fetch(url);
    const data = await res.json();

    console.log(data);

    const epRes = await fetch(
        `https://api.consumet.org/meta/anilist/watch/${
            data.episodes[epNumber == 0 ? 0 : epNumber - 1].id
        }?provider=zoro`
    );
    const epData = await epRes.json();

    let quality = 0;
    let previewQuality = 0;

    epData.sources.forEach((episode, index) => {
        if (episode.quality == "1080p") {
            quality = index;
        } else if (episode.quality == "320p") {
            previewQuality = index;
        }
    });

    let subtitleIndex = 0;

    epData.subtitles.forEach((episode, index) => {
        if (episode.lang == "English") {
            subtitleIndex = index;
        }
    });

    const parser = new WebVTTParser();
    const webVtt = await axios.get(epData.subtitles[subtitleIndex].url);
    //console.log(webVtt.data);

    const tree = parser.parse(webVtt.data, "metadata");

    console.log(tree.cues[0]);

    // Pass data to the page via props
    return { props: { data, epData, quality, previewQuality, epNumber, tree } };
}
